/* eslint-disable no-return-assign */
/* eslint-disable func-names */
/* eslint-disable react/no-string-refs */
/* eslint-disable no-console */
/* eslint-disable comma-dangle */

/**
*
* {{properCase name }}
*
*/

import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
{{#if wantHeaders}}
import { Helmet } from 'react-helmet';
{{/if}}
{{#if wantMessages}}
import { FormattedMessage } from 'react-intl';
{{/if}}
{{#if wantActionsAndReducer}}
import { createStructuredSelector } from 'reselect';
{{/if}}
import { compose } from 'redux';
import Card from "components/Card";
import Form from "components/Form";
import {
{{ name }}Action,
{{ name }}ActionPost,
} from "./actions";

{{#if wantSaga}}
import injectSaga from 'utils/injectSaga';
{{/if}}
{{#if wantActionsAndReducer}}
import injectReducer from 'utils/injectReducer';
import {
makeSelect{{properCase name}},
make{{properCase name }}PayloadSelector,
make{{properCase name }}ModelSelector,
} from './selectors';
import reducer from './reducer';
{{/if}}
{{#if wantSaga}}
import saga from './saga';
{{/if}}
{{#if wantMessages}}
import messages from './messages';
{{/if}}

import "./{{ properCase name }}.css";

/* eslint-disable react/prefer-stateless-function */
export class {{ properCase name }} extends {{{ type }}} {
constructor(props) {
super(props);
// Local component States
this.state = {
render: "This is Default  Form Render Space"
};
// Binding Component specific methods
// this.FormAPICall = this.FormAPICall.bind(this);
}

{{#if wantSaga}}
componentDidMount() {
// On Component Mount, set the form structure and Model
this.props.{{ name }}Dispatch({
model: this.props.model,
struct: this.props.formStructure
});

}
{{/if}}



// {{ upperCase name }} Form Methods
{{ name }}FormAPICall = e => {
  e.preventDefault();
  console.log(" Form Data Method is invoked");

  this.props.{{ name }}DispatchPost({
  model: this.props.model,
  ChannelId: this.props.ChannelId
  });
};


render() {
{{#if wantSaga}}

{{/if}}
if (this.props.deploy === true) {
return (
<div>
  {{#if wantHeaders}}
  <Helmet>
    <title>{{properCase name}}</title>
    <meta name="description" content="Description of {{properCase name}}" />
  </Helmet>
  {{/if}}
  {{#if wantMessages}}
  <FormattedMessage {...messages.header} />
  {{/if}}
  <div>
    <div>
      Injected Model is :::
      <strong> {this.props.{{ name }}PropsModel}</strong>
    </div>
    <div>
      Channel Id is :::
      <strong> {this.props.ChannelId}</strong>
    </div>
    <div>
      <p>
        Submited Forms JSON Response :: <br />
        <pre className="jsonResponse">
                    {JSON.stringify(this.props.{{ name }}PropsPayload)}
                  </pre>
      </p>
    </div>
   
  </div>
  {/* Display Form */}
  <div>
    <form ref="form" onSubmit={this.{{ name }}FormAPICall}>
      <button type="submit">{{ properCase name }}</button>
    </form>
  </div>
</div>
);
}
return (
<div>
  <Helmet>
    <title>{{properCase name }}</title>
    <meta name="description" content="Description of {{properCase name }}" />
  </Helmet>
  <FormattedMessage {...messages.header} />
  <div>
    <pre>{/* <code>{this.state.{{ name }}PropsPayload}</code> */}</pre>
  </div>
</div>
);
}
}

{{ properCase name }}.propTypes = {
//dispatch: PropTypes.func.isRequired,
ChannelId: PropTypes.string.isRequired,
model: PropTypes.string.isRequired,
deploy: PropTypes.bool.isRequired,
{{ name }}Dispatch: PropTypes.func,
{{ name }}DispatchPost: PropTypes.func,
{{ name }}PropsPayload: PropTypes.object,
};

{{#if wantActionsAndReducer}}
const mapStateToProps = createStructuredSelector({
//{{ camelCase name }}: makeSelect{{properCase name}}(),
{{ name }}PropsPayload: make{{properCase name }}PayloadSelector(),
{{ name }}PropsModel: make{{properCase name }}ModelSelector()
});
{{/if}}

function mapDispatchToProps(dispatch) {
return {
// dispatch,
 {{ name }}Dispatch: ({ ChannelId, model }) =>
    dispatch({{ name }}Action({ ChannelId, model })),
  {{ name }}DispatchPost: ({ ChannelId, model }) =>
    dispatch({{ name }}ActionPost({ ChannelId, model }))
};
}

{{#if wantActionsAndReducer}}
const withConnect = connect(
mapStateToProps,
mapDispatchToProps
);

const withReducer = injectReducer({ key: '{{ camelCase name }}', reducer });
{{else}}
const withConnect = connect(null, mapDispatchToProps);
{{/if}}
{{#if wantSaga}}
const withSaga = injectSaga({ key: '{{ camelCase name }}', saga });
{{/if}}

export default compose(
{{#if wantActionsAndReducer}}
withReducer,
{{/if}}
{{#if wantSaga}}
withSaga,
{{/if}}
withConnect
)({{ properCase name }});