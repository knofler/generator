/**
 *
 * {{properCase name }}
 *
 */

import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
{{#if wantHeaders}}
import { Helmet } from 'react-helmet';
{{/if}}
{{#if wantMessages}}
import { FormattedMessage } from 'react-intl';
{{/if}}
{{#if wantActionsAndReducer}}
import { createStructuredSelector } from 'reselect';
{{/if}}
import { compose } from 'redux';
import Card from "components/Card";
import { 
  {{ name }}ActionApiData,
 } from "./actions";

{{#if wantSaga}}
import injectSaga from 'utils/injectSaga';
{{/if}}
{{#if wantActionsAndReducer}}
import injectReducer from 'utils/injectReducer';
import {
  makeSelect{{properCase name}},
  make{{properCase name }}ApiDataSelector,
 } from './selectors';
import reducer from './reducer';
{{/if}}
{{#if wantSaga}}
import saga from './saga';
{{/if}}
{{#if wantMessages}}
import messages from './messages';
{{/if}}

/* eslint-disable react/prefer-stateless-function */
export class {{ properCase name }} extends {{{ type }}} {
  {{#if wantSaga}}
  componentDidMount() {
    // load API Data
    this.props.{{ name }}DispatchApiData("111111", 88, 99);

  }
  {{/if}}
  render() {
    {{#if wantSaga}}
      const apiData = {...this.props.{{name}}PropsApiData }
      console.log("apiData:: ", apiData)
    {{/if}}
    return (
      <div>
      {{#if wantHeaders}}
        <Helmet>
          <title>{{properCase name}}</title>
          <meta name="description" content="Description of {{properCase name}}" />
        </Helmet>
      {{/if}}
      {{#if wantMessages}}
        <FormattedMessage {...messages.header} />
        <div>
          {this.props.{{ name }}PropsApiData.map(each => (
            <div>
              <Card 
                key={each.id} 
                {...each} 
                // click={this.clickHandler.bind(null, each.id)} 
              />
            </div>
            ))
          }
        </div>
      {{/if}}
      </div>
    );
  }
}

{{ properCase name }}.propTypes = {
  //dispatch: PropTypes.func.isRequired,
  {{ name }}PropsApiData: PropTypes.array,
  {{ name }}DispatchApiData: PropTypes.func,
};

{{#if wantActionsAndReducer}}
const mapStateToProps = createStructuredSelector({
  //{{ camelCase name }}: makeSelect{{properCase name}}(),
  {{ name }}PropsApiData : make{{ properCase name }}ApiDataSelector()
});
{{/if}}

function mapDispatchToProps(dispatch) {
  return {
    // dispatch,
    {{ name }}DispatchApiData: (tenantId, skip, take) =>
    dispatch({{ name }}ActionApiData(tenantId, skip, take)),
   
  };
}

{{#if wantActionsAndReducer}}
const withConnect = connect(
  mapStateToProps,
  mapDispatchToProps
);

const withReducer = injectReducer({ key: '{{ camelCase name }}', reducer });
{{else}}
const withConnect = connect(null, mapDispatchToProps);
{{/if}}
{{#if wantSaga}}
const withSaga = injectSaga({ key: '{{ camelCase name }}', saga });
{{/if}}

export default compose(
{{#if wantActionsAndReducer}}
  withReducer,
{{/if}}
{{#if wantSaga}}
  withSaga,
{{/if}}
  withConnect
)({{ properCase name }});
